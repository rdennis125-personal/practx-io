name: Deploy Practx Equipment API

on:
  push:
    branches:
      - main
    paths:
      - 'practx-equipment-api/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: practx-equipment-api
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: practx-equipment-api/package-lock.json

      - name: Install Node dependencies
        run: npm ci

      - name: Lint OpenAPI definition
        run: npm run lint:openapi

      - name: Restore API project
        run: dotnet restore src/Practx.Equipment.Api/Practx.Equipment.Api.csproj

      - name: Restore test project
        run: dotnet restore tests/Practx.Equipment.Api.Tests/Practx.Equipment.Api.Tests.csproj

      - name: Build API
        run: dotnet build src/Practx.Equipment.Api/Practx.Equipment.Api.csproj -c Release --no-restore

      - name: Dotnet info (diag)
        run: dotnet --info

      - name: Verify test artifacts (diag)
        run: |
          ls -la tests/Practx.Equipment.Api.Tests || true
          ls -la tests/Practx.Equipment.Api.Tests/bin/Release/net8.0 || true
          cat tests/Practx.Equipment.Api.Tests/Practx.Equipment.Api.Tests.csproj || true

      - name: Run tests
        run: |
          set -euo pipefail
          dotnet test tests/Practx.Equipment.Api.Tests/Practx.Equipment.Api.Tests.csproj -c Release --no-build --logger "console;verbosity=normal" && exit 0
          echo "dotnet test failed; attempting fallback with dotnet vstest..."
          DLL="tests/Practx.Equipment.Api.Tests/bin/Release/net8.0/Practx.Equipment.Api.Tests.dll"
          if [ ! -f "$DLL" ]; then
            echo "Expected test DLL not found at $DLL"
            exit 1
          fi
          dotnet vstest "$DLL" --Platform:x64 --logger:"console;verbosity=normal"

      - name: Publish artifact
        run: dotnet publish src/Practx.Equipment.Api/Practx.Equipment.Api.csproj -c Release -o publish

      - name: Create deployment package
        run: |
          cd publish
          zip -r ../equip-api-pkg.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: equip-api-pkg
          path: practx-equipment-api/equip-api-pkg.zip
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ vars.ENV_NAME != '' && vars.ENV_NAME || 'dev' }}
    env:
      AZ_RG: ${{ vars.AZ_RG }}
      SERVICE_NAME: ${{ vars.SERVICE_NAME }}
      APIM_NAME: ${{ vars.APIM_NAME }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: equip-api-pkg
          path: deploy

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Verify resource group exists
        run: az group show -n "$AZ_RG" --query name -o tsv

      - name: Verify App Service exists
        run: az resource show -g "$AZ_RG" -n "$SERVICE_NAME" --resource-type Microsoft.Web/sites --query name -o tsv

      - name: Deploy to App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.SERVICE_NAME }}
          package: deploy/equip-api-pkg.zip

      - name: Resolve service host
        id: resolve-host
        run: |
          host=$(az webapp show -g "$AZ_RG" -n "$SERVICE_NAME" --query defaultHostName -o tsv)
          if [[ -z "$host" ]]; then
            echo "Failed to resolve the App Service hostname" >&2
            exit 1
          fi
          echo "host=$host" >> "$GITHUB_OUTPUT"
          echo "SERVICE_HOST=https://$host" >> "$GITHUB_ENV"
          echo "Service hostname: https://$host" >> "$GITHUB_STEP_SUMMARY"

      - name: Validate API Management service
        if: ${{ env.APIM_NAME != '' }}
        run: az apim show -g "$AZ_RG" -n "$APIM_NAME" --query name -o tsv

      - name: Import OpenAPI into API Management
        if: ${{ env.APIM_NAME != '' }}
        working-directory: practx-equipment-api
        run: |
          az apim api import \
            --path equipment/v1 \
            --api-id equipment-v1 \
            --resource-group "$AZ_RG" \
            --service-name "$APIM_NAME" \
            --specification-format OpenApi \
            --specification-file OpenAPI/openapi.yaml \
            --service-url "https://${{ steps.resolve-host.outputs.host }}"

      - name: Run smoke test
        working-directory: practx-equipment-api
        run: ./scripts/smoke.sh "https://${{ steps.resolve-host.outputs.host }}"
